# Helius Portfolio Tracker

```elixir
Mix.install(
  [
    {:kino, "~> 0.12.0"},
    {:req, "~> 0.4.0"},
    {:kino_vega_lite, "~> 0.1.10"}
  ],
  force: true
)
```

## Config

```elixir
helius_api_key_input = Kino.Input.password("Helius API Key") |> Kino.render()
coinmarketcap_api_key_input = Kino.Input.password("Coinmarket API Key")
```

## The magic...

```elixir
defmodule TokenFetcher do
  def get_tokens_for(address, api_key) do
    url = "https://rpc.helius.xyz/?api-key=" <> api_key

    body = %{
      jsonrpc: "2.0",
      id: "tokens-#{address}",
      method: "getAssetsByOwner",
      params: %{
        ownerAddress: address,
        page: 1,
        limit: 1000,
        displayOptions: %{
          showFungible: true,
          showGrandTotal: true
        }
      }
    }

    result = Req.post!(url, json: body).body["result"]

    if result["total"] > 1000 do
      Kino.render(
        "⚠️ Wallet #{address} has more than 1000 assets. Pagination is not implemented yet so will only get the first 1000"
      )
    end

    result["items"]
    |> Enum.filter(fn item ->
      (item["interface"] == "FungibleToken" or item["interface"] == "FungibleAsset") and
        Map.has_key?(item["token_info"], "price_info")
    end)
  end

  def get_balance_for(address, api_key) do
    url = "https://rpc.helius.xyz/?api-key=" <> api_key

    body = %{
      jsonrpc: "2.0",
      id: "balance-#{address}",
      method: "getBalance",
      params: [address]
    }

    Req.post!(url, json: body).body["result"]["value"] / 1_000_000_000
  end
end
```

```elixir
defmodule TokenAnalyse do
  def analyse_lists_of_tokens(lists_of_tokens) do
    lists_of_tokens
    # first extract just the fields we need for each token
    |> Enum.flat_map(fn raw_tokens ->
      raw_tokens
      |> Enum.map(fn token ->
        %{
          id: token["id"],
          symbol: token["token_info"]["symbol"],
          value_usd: token["token_info"]["price_info"]["total_price"]
        }
      end)
    end)
    # then flatten matching tokens by summing the value_usd field
    # at this stage we convert to a map for deduplication
    |> Enum.reduce(%{}, fn token, acc ->
      {_current, new_acc} =
        Map.get_and_update(acc, token.id, fn existing ->
          map =
            if existing == nil do
              # this is a new value to store in the map
              %{
                symbol: token.symbol,
                value_usd: token.value_usd
              }
            else
              # just add to the value_usd
              existing |> Map.update!(:value_usd, &(&1 + token.value_usd))
            end

          {existing, map}
        end)

      new_acc
    end)
    # convert back to a list, just keeping the values from the reduce
    |> Map.values()
  end
end
```

```elixir
defmodule TokenDisplay do
  def make_displayable(analysed_tokens) do
    sum_usd_values =
      analysed_tokens
      |> Enum.map(& &1.value_usd)
      |> Enum.sum()

    analysed_tokens
    |> Enum.map(fn token ->
      percent = (token.value_usd / sum_usd_values * 100) |> Float.round(1)

      token
      |> Map.put(:percent, percent)
      |> Map.put(:tooltip, "#{token.symbol}: #{percent}%")
    end)
    # Reduce noise: only keep those that account for at least 0.5% of the portfolio
    |> Enum.filter(&(&1.percent >= 0.5))
  end

  def render(displayable_tokens) do
    VegaLite.new()
    |> VegaLite.data_from_values(displayable_tokens)
    |> VegaLite.mark(:arc)
    |> VegaLite.encode_field(:theta, "value_usd", type: :quantitative)
    |> VegaLite.encode_field(:color, "symbol",
      type: :nominal,
      sort: %{field: "value_usd", order: "descending"}
    )
    |> VegaLite.encode_field(:tooltip, "tooltip", type: :nominal)
    |> VegaLite.encode_field(:order, "value_usd", type: :quantitative, sort: "descending")
  end
end
```

```elixir
defmodule SolPrice do
  def fetch_latest_price(api_key) do
    sol_cmc_id = "5426"

    cmc_req =
      Req.new(base_url: "https://pro-api.coinmarketcap.com")
      |> Req.Request.put_header("X-CMC_PRO_API_KEY", api_key)

    body = Req.get!(cmc_req, url: "/v1/cryptocurrency/quotes/latest?id=#{sol_cmc_id}").body
    body["data"][sol_cmc_id]["quote"]["USD"]["price"]
  end
end
```

```elixir
defmodule Analyser do
  def render_for_addresses(addresses, include_unstaked_sol, helius_api_key, cmc_api_key) do
    tokens =
      addresses
      |> Enum.map(&TokenFetcher.get_tokens_for(&1, helius_api_key))
      |> TokenAnalyse.analyse_lists_of_tokens()

    tokens =
      case include_unstaked_sol do
        false ->
          tokens

        true ->
          sol_balance =
            addresses
            |> Enum.map(&TokenFetcher.get_balance_for(&1, helius_api_key))
            |> Enum.sum()

          sol_price = SolPrice.fetch_latest_price(cmc_api_key)
          [%{symbol: "SOL", value_usd: sol_balance * sol_price} | tokens]
      end

    tokens
    |> TokenDisplay.make_displayable()
    |> TokenDisplay.render()
  end
end
```

## Analyse!

```elixir
Kino.Markdown.new("<br />") |> Kino.render()

form =
  Kino.Control.form(
    [
      addresses: Kino.Input.textarea("Solana Addresses (one per line)"),
      unstaked_sol: Kino.Input.checkbox("Include unstaked SOL", default: true)
    ],
    submit: "Analyse"
  )

form |> Kino.render()
Kino.Markdown.new("<br /><br />") |> Kino.render()
frame = Kino.Frame.new(placeholder: false)
```

<hr />

```elixir
for event <- Kino.Control.stream(form) do
  addresses = event.data.addresses |> String.split("\n") |> Enum.filter(&(String.length(&1) > 0))
  require_sol_price = event.data.unstaked_sol
  helius_api_key = Kino.Input.read(helius_api_key_input)
  cmc_api_key = Kino.Input.read(coinmarketcap_api_key_input)

  errors =
    [
      if(Enum.count(addresses) == 0, do: "No addresses entered", else: nil),
      if(String.length(helius_api_key) == 0, do: "No helius API key", else: nil),
      if(require_sol_price and String.length(cmc_api_key) == 0,
        do: "CoinMarketCap API key is required if including SOL",
        else: nil
      )
    ]
    |> Enum.filter(&(&1 != nil))

  case errors do
    [] ->
      rendered =
        Analyser.render_for_addresses(
          addresses,
          event.data.unstaked_sol,
          helius_api_key,
          cmc_api_key
        )

      Kino.Frame.render(frame, rendered)

    _ ->
      errors_string = errors |> Enum.map(&"⚠️ #{&1}") |> Enum.join("\n -")

      Kino.Frame.render(
        frame,
        Kino.Markdown.new("## Errors\n\n#{errors_string}")
      )
  end
end
```
